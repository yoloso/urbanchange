# 06_create_panel.py
# Generates a panel for a specific location and time period
#
# Usage: Run the following command in terminal (modified to your neighborhood of choice)
#   python 06_create_panel.py
#
# Data inputs:
#   - CSV file including one row per detected object instance (generated
#     using 01_detect_segments.py on the selected neighborhoods)
#   - Segment dictionary for the selected neighborhood
#   - Image log for the selected neighborhood generated during the image
#   collection process
#   - Urban index generated by 04_indices_in_time.py
#
# Outputs:
#   - CSV file

from datetime import date
import json
import os
import pandas as pd

from DataScripts.read_files import load_segment_dict
from DataScripts.read_files import prep_object_vectors_with_dates


# Parameters
SEGMENT_DICTIONARY_FILE = os.path.join(
    'Data', 'ProcessedData', 'SFStreetView', 'segment_dictionary_SFTenderloin.json')
IMAGES_DIR = os.path.join(
    'Data', 'ProcessedData', 'SFStreetView', 'Res_640', 'SFTenderloin_full_2009_2021')
OBJECT_VECTORS_DIR = os.path.join(
    'Outputs', 'Detection', 'Res_640', 'SFTenderloin_full_2009_2021')
URBAN_INDEX = os.path.join(
    'Outputs', 'Urban_quality', 'Res_640', 'SFTenderloin_full_2009_2021',
    'indices_count_pano_adjustment_50.csv')
SELECTED_INDEX = 'weighted_sum_log'
PERIOD = {'start': date(2009, 1, 1), 'end': date(2021, 7, 31)}
# Define treatment (number of months)
TREATMENT = 6

# Load files
segment_dictionary = load_segment_dict(SEGMENT_DICTIONARY_FILE)
object_vectors = prep_object_vectors_with_dates(OBJECT_VECTORS_DIR, IMAGES_DIR)

# Load selected urban index
try:
    with open(URBAN_INDEX, 'r') as file:
        urban_index = pd.read_csv(file)
except FileNotFoundError:
    raise Exception('[ERROR] Urban index file not found.')

try:
    urban_index['index'] = urban_index[SELECTED_INDEX]
    urban_index = urban_index[['segment_id', 'segment_date', 'index', 'tent']]
    urban_index['segment_date'] = pd.to_datetime(urban_index['segment_date'])
except KeyError:
    raise Exception('[ERROR] Selected index is not found in urban index file.')

# Fix dates
object_vectors['segment_date'] = pd.to_datetime(object_vectors['img_date'])
object_vectors['segment_date'] = object_vectors['segment_date'].apply(
    lambda x: x.date())
urban_index['segment_date'] = urban_index['segment_date'].apply(
    lambda x: x.date())

# Get tent instances
tent_vectors = object_vectors[object_vectors['class'] == 'tent'].copy()
tent_vectors = tent_vectors[tent_vectors['confidence'] >= 0.5]
tent_vectors = tent_vectors.groupby(['segment_id', 'segment_date']).size().\
    reset_index(name='count')
tent_vectors['tent_indicator'] = 1

# Generate base panel
months = [ts.date() for ts in pd.date_range(
    PERIOD['start'], PERIOD['end'], freq='MS')]
month_df = pd.DataFrame({'segment_date': months})

hashed_segments = [
    json.loads(seg['segment_id']) for seg in segment_dictionary.values()]
hashed_segments = ['{}-{}'.format(seg_id[0], seg_id[1]) for seg_id in hashed_segments]
segment_df = pd.DataFrame({'segment_id': hashed_segments})

# Add tent indicator to base panel
base_panel = segment_df.merge(month_df, how='cross')
base_panel = base_panel.merge(
    tent_vectors[['segment_id', 'segment_date', 'tent_indicator']],
    how='left', on=['segment_id', 'segment_date'], validate='one_to_one')

# Add urban index to base panel
base_panel = base_panel.merge(
    urban_index[['segment_id', 'segment_date', 'index', 'tent']],
    how='left', on=['segment_id', 'segment_date'], validate='one_to_one')

# Modify zeros in base panel: We need to identify cases where zero tents
# were detected, as these are currently fake "nan"s
base_panel['tent_indicator'] = base_panel.apply(
    lambda row: 0 if pd.isnull(row['tent_indicator']) and pd.notnull(row['index']) else row['tent_indicator'],
    axis=1
)

# Generate final panel
final_panel = base_panel.copy()

# Generate treatment column
shifted_panels = [final_panel]
for lag in range(1, TREATMENT + 1):
    shifted_panels.append(final_panel.shift(lag))
final_panel = pd.concat(shifted_panels, axis=1)
